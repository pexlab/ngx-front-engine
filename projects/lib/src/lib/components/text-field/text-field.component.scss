@use '../../../../assets/fe-styles/theme' with ($scope: 'text-field');
@use '../../../../assets/fe-styles/utils';

$PADDING : 20px;

@mixin stateStyle($state) {

    background-color : theme.hex('#{$state}-background');

    & > .label {
        color : theme.hex('#{$state}-text');
    }

    & > .input {
        & > input, & > textarea {
            color                       : theme.hex('#{$state}-text');
            caret-color                 : theme.hex('#{$state}-text');
            -webkit-tap-highlight-color : transparent;
        }
    }

    &.pinned {
        & > .input > span.placeholder {
            color : theme.hex('#{$state}-pinned-placeholder');
        }
    }

    &.static {
        & > .input > span.placeholder {
            color : theme.hex('#{$state}-static-placeholder');
        }
    }

    & > .divider {
        background-color : theme.hex('#{$state}-divider');
    }

    & > .icons {

        color : theme.hex('#{$state}-icon');

        & > .button {

            color : theme.hex('#{$state}-icon');

            & > .background {
                background-color : theme.hex('#{$state}-icon-background');
            }
        }
    }
}

:host {

    position : relative;

    display  : block;

    width    : 100%;

    @include theme.commonFont('body');

    & > div.measurement, & > .field > .label {

        width          : fit-content;

        display        : grid;
        grid-auto-flow : column;
        grid-gap       : 10px;
        place-items    : center left;

        padding-top    : $PADDING;
        padding-bottom : $PADDING;
        box-sizing     : border-box;

        @include theme.inlineDeepIcon(20px);
    }

    & > div.measurement {

        position       : absolute;
        top            : 0;
        left           : 0;

        z-index        : -1;
        opacity        : 0;
        pointer-events : none;
        user-select    : none;

        white-space    : nowrap;

        max-width      : 50%;
    }

    /* Field states */
    & > .field {

        // Activate transition only after initialisation to avoid running the transition directly on render
        &.activate_transitions {

            transition : border .25s ease, background-color .25s ease;

            & > .border {

                transition : opacity .25s .15s ease;

                & > path {
                    transition : stroke .25s ease;
                }
            }

            & > .label {
                transition : color 0.35s ease;
            }

            & > .divider {
                transition : background-color 0.35s ease;
            }

            & > .input {

                & > span.placeholder {
                    transition : color .25s ease, left .25s ease, top .25s ease, opacity .25s ease;
                }

                & > input, & > textarea {
                    transition : color 0.35s ease;
                }
            }
        }

        @include stateStyle('idle');

        &.idle {

            & > .border > path {
                stroke : theme.hex('idle-border');
            }
        }

        &.idle:not(.initial) {

            & > .border.idle {
                animation : idleBorderIn 0.25s ease forwards;
            }

            & .border.focused {
                animation : focusedBorderBlur 0.25s cubic-bezier(0, 0.55, 0.45, 1) forwards;
            }
        }

        &.disabled {

            @include stateStyle('disabled');

            cursor : not-allowed;

            & > .input {
                & > input, & > textarea {
                    cursor : not-allowed;
                }
            }
        }

        &.focused {

            @include stateStyle('focused');

            & > .border {

                &.idle {
                    animation : idleBorderBlur 0.25s 0.15s ease forwards;
                }

                &.focused {
                    animation : focusedBorderIn 0.45s cubic-bezier(0, 0.55, 0.45, 1) forwards;
                }
            }
        }

        &.invalid {

            @include stateStyle('invalid');

            &:not(:focus-within) {

                & > .border.idle {

                    & > path {
                        stroke : theme.hex('invalid-border');
                    }

                    animation : invalidShake .5s linear !important;
                }
            }
        }
    }

    & > .field {

        position       : relative;

        width          : 100%;
        height         : fit-content;

        padding-left   : $PADDING;
        box-sizing     : border-box;

        display        : grid;
        grid-auto-flow : column;
        grid-gap       : 20px;
        place-items    : center;

        cursor         : text;

        border-radius  : 11px;

        isolation      : isolate;

        &.isArea {
            height : 100%;
        }

        &.hasLabel {
            grid-template-columns : var(--label-width) 1px 1fr;
        }

        & > .border {

            opacity  : 1;

            position : absolute;

            left     : 0;
            top      : 0;

            width    : 100%;
            height   : 100%;

            & > path {
                fill         : none;
                stroke-width : 2;
            }

            &.idle {

                & > path {
                    stroke : theme.hex('idle-border');
                }
            }

            &.focused {

                opacity : 0;

                & > path {
                    stroke : theme.hex('focused-border');
                }
            }
        }

        & > .label {
            justify-self : left;
            user-select  : none;
        }

        & .divider {
            width  : 100%;
            height : calc(100% - (2 * #{$PADDING}));
        }

        & > .icons {

            z-index        : 1;

            position       : absolute;

            top            : 50%;
            right          : $PADDING;

            transform      : translateY(-50%);

            display        : grid;
            grid-auto-flow : row;
            grid-gap       : .5rem;

            @include theme.inlineIcon(1rem);

            & > svg-icon {
                transition : color .25s ease;
            }

            & > .button {

                z-index : 1;

                @include utils.hover {

                    color : theme.hex('focused-icon');

                    & > .background {
                        opacity          : 1;
                        transform        : translateY(-50%) translateX(-50%) scale(1);
                        background-color : theme.hex('focused-icon-background');
                    }

                    & > svg-icon {
                        color : var(--icon-hover-color);
                    }
                }

                & > .background {

                    position                    : absolute;

                    left                        : 50%;
                    top                         : 50%;

                    width                       : 2.5rem;
                    height                      : 2.5rem;

                    cursor                      : pointer;

                    border-radius               : 40px;

                    opacity                     : 0;
                    transform                   : translateY(-50%) translateX(-50%) scale(0.75);

                    transition                  : opacity .25s ease, transform .25s ease, background-color .25s ease;

                    -webkit-tap-highlight-color : transparent;

                    &:focus {
                        outline : none;
                    }
                }

                & > svg-icon {

                    position       : relative;

                    width          : 1rem;
                    height         : 1rem;

                    display        : grid;
                    place-items    : center;

                    pointer-events : none;

                    transition     : color .25s ease;

                    & > svg {
                        width  : 1rem;
                        height : 1rem;
                    }
                }
            }
        }

        & > .input {

            z-index        : 1;

            position       : relative;

            width          : 100%;
            height         : 100%;

            padding-top    : $PADDING;
            padding-bottom : $PADDING;
            padding-right  : $PADDING;

            box-sizing     : border-box;

            & > span.placeholder {

                position       : absolute;

                left           : var(--placeholder-x);
                right          : $PADDING + 10px;
                top            : var(--placeholder-y);

                user-select    : none;
                pointer-events : none;

                opacity        : 1;

                overflow       : hidden;
                text-overflow  : ellipsis;
                text-align     : left;

                &.hidden {
                    opacity : 0;
                }
            }

            &.iconPadding {

                padding-right : calc(($PADDING * 2) + 1rem);

                & > span.placeholder {
                    &.unpinned {
                        right : calc(($PADDING * 2) + 1rem);
                    }
                }
            }

            & > input, & > textarea {

                width      : 100%;
                height     : 100%;

                border     : none;
                outline    : none;

                margin     : 0;
                padding    : 0;

                text-align : left;

                @include theme.commonFont('body');

                background : transparent;

                &:-webkit-autofill {
                    -webkit-background-clip : text;
                }

                &.monospace {
                    @include theme.commonFont('code');
                    letter-spacing : .05rem;
                }
            }

            & > label {
                position       : fixed;
                top            : 0;
                left           : 0;
                pointer-events : none;
                visibility     : hidden;
                opacity        : 0;
                user-select    : none;
            }

            & > input {
                &::-webkit-outer-spin-button,
                &::-webkit-inner-spin-button {
                    -webkit-appearance : none;
                    margin             : 0;
                }
            }

            & > textarea {
                resize : none;
                @include theme.scrollbar(theme.hex('idle-border'), theme.hex('idle-border'), transparent, 'none', 0.5rem, 0.25rem);
            }

            & > input[type='number'] {
                -moz-appearance : textfield;
            }

            & > input[type='search'] {
                &::-webkit-search-decoration,
                &::-webkit-search-cancel-button,
                &::-webkit-search-results-button,
                &::-webkit-search-results-decoration {
                    display : none;
                }
            }

            & > input[type='date'], & > input[type='datetime-local'], & > input[type='month'], & > input[type='time'], & > input[type='week'] {

                pointer-events : visible;
                opacity        : 1;

                transition     : opacity .25s ease;

                &::-webkit-calendar-picker-indicator {
                    display : none;
                }

                &::-webkit-date-and-time-value {
                    text-align : left;
                }
            }

            &.hidden {
                & > input[type='date'], & > input[type='datetime-local'], & > input[type='month'], & > input[type='time'], & > input[type='week'] {
                    pointer-events : none;
                    opacity        : 0;
                }
            }

            &.conceal {
                & > input, & > textarea {
                    letter-spacing : 0.07em;
                    font-family    : text-security-disc, sans-serif;
                }
            }
        }
    }
}

/* Keyframes */

@keyframes idleBorderIn {

    0% {
        opacity : 0;
    }

    100% {
        opacity : 1;
    }
}

@keyframes idleBorderBlur {

    0% {
        opacity : 1;
    }

    100% {
        opacity : 0;
    }
}

@keyframes focusedBorderIn {

    0% {
        opacity   : 0;
        transform : scale(1.25);
    }

    100% {
        opacity   : 1;
        transform : scale(1);
    }
}

@keyframes focusedBorderBlur {

    0% {
        opacity   : 1;
        transform : scale(1);
    }

    100% {
        opacity   : 0;
        transform : scale(1.1);
    }
}

@keyframes invalidShake {

    8%, 41% {
        transform : translateX(-10px);
    }
    25%, 58% {
        transform : translateX(10px);
    }
    75% {
        transform : translateX(-5px);
    }
    92% {
        transform : translateX(5px);
    }
    0%, 100% {
        transform : translateX(0);
    }
}
