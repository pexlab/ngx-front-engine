@use '../../../../assets/styles/theme' as config with ($scope: 'text-field');

$PADDING : 20px;

:host {
  
  display : block;
  
  width   : 100%;
  
  @include config.commonFont('body');
  
  & > .measurement, & > .field > .label {
	
	width          : fit-content;
	
	display        : grid;
	grid-auto-flow : column;
	grid-gap       : 10px;
	place-items    : center left;
	
	padding-top    : $PADDING;
	padding-bottom : $PADDING;
	box-sizing     : border-box;
	
	@include config.inlineDeepIcon(20px);
  }
  
  & > .measurement {
	
	position       : absolute;
	
	z-index        : -1;
	opacity        : 0;
	pointer-events : none;
	user-select    : none;
	
	white-space    : nowrap;
  }
  
  & > .field {
	
	position              : relative;
	
	width                 : 100%;
	height                : fit-content;
	
	padding-left          : $PADDING;
	box-sizing            : border-box;
	
	display               : grid;
	grid-template-columns : var(--label-width) 1px 1fr;
	grid-auto-flow        : column;
	grid-gap              : 20px;
	place-items           : center;
	
	cursor                : text;
	
	border-radius         : 10px;
	
	backdrop-filter       : blur(5px);
	
	transition            : border .25s ease, background-color .25s ease;
	
	&.isArea {
	  height : 100%;
	}
	
	& > .border {
	  
	  opacity    : 1;
	  
	  position   : absolute;
	  
	  left       : -1px;
	  top        : -1px;
	  
	  width      : calc(100% + 2px);
	  height     : calc(100% + 2px);
	  
	  transition : opacity .25s .15s ease;
	  
	  & > path {
		fill         : none;
		stroke-width : 2;
		transition   : stroke .25s ease;
	  }
	  
	  &.normal {
		
		& > path {
		  stroke : config.hex('idle-border');
		}
	  }
	  
	  &.focus {
		
		opacity : 0;
		
		& > path {
		  stroke : config.hex('focus-border');
		}
	  }
	}
	
	& > .label {
	  
	  justify-self : left;
	  
	  user-select  : none;
	  
	  transition   : color 0.35s ease;
	}
	
	& .divider {
	  
	  width      : 100%;
	  height     : calc(100% - (2 * #{$PADDING}));
	  
	  transition : background-color 0.35s ease;
	}
	
	& > .input {
	  
	  z-index        : 1;
	  
	  position       : relative;
	  
	  width          : 100%;
	  height         : 100%;
	  
	  padding-top    : $PADDING;
	  padding-bottom : $PADDING;
	  padding-right  : $PADDING;
	  
	  box-sizing     : border-box;
	  
	  & > span.placeholder {
		
		position       : absolute;
		
		left           : var(--placeholder-x);
		top            : var(--placeholder-y);
	 
		padding-right  : $PADDING;
		
		user-select    : none;
		pointer-events : none;
		
		/* Color in the meantime until .pinned or .unpinned is added */
		color          : config.hex('placeholder-unpinned-unfocused');
		
		transition     : color .25s ease, left .25s ease, top .25s ease;
		
		&.hidden {
		  opacity : 0;
		}
	  }
	  
	  & > input, & > textarea {
		
		width       : 100%;
		height      : 100%;
		
		border      : none;
		outline     : none;
		
		margin      : 0;
		padding     : 0;
		
		@include config.commonFont('body');
		
		caret-color : config.hex('focus-text'); /* Gets overwritten in error state */
		
		background  : transparent;
		
		transition  : color 0.35s ease;
		
		&:-webkit-autofill {
		  -webkit-background-clip : text;
		}
	  }
	  
	  & > textarea {
		resize : none;
	  }
	  
	  & > input[type='date']::-webkit-calendar-picker-indicator {
		display : none;
	  }
	}
	
	/* Field states */
	
	// Initial state
	&:not(.focused):not(.error) {
	  
	  background-color : config.hex('idle-background');
	  
	  & > .label {
		color : config.hex('idle-text');
	  }
	  
	  & > .input {
		
		& > input, & > textarea {
		  color : config.hex('idle-text');
		}
	  }
	  
	  &.pinned {
		& > .input > span.placeholder {
		  color : config.hex('placeholder-pinned-unfocused');
		}
	  }
	  
	  &.unpinned {
		& > .input > span.placeholder {
		  color : config.hex('placeholder-unpinned-unfocused');
		}
	  }
	  
	  & .divider {
		background-color : config.hex('idle-divider');
	  }
	}
	
	// Gets added after the first time the user removes focus from the field to avoid unnecessary animation on load
	&.unfocused {
	  
	  & > .border.normal {
		animation : normalBorderIn 0.25s ease forwards;
	  }
	  
	  & .border.focus {
		animation : focusBorderBlur 0.25s cubic-bezier(0, 0.55, 0.45, 1) forwards;
	  }
	}
	
	&.focused {
	  
	  background-color : config.hex('focus-background');
	  
	  & > .border.normal {
		animation : normalBorderBlur 0.25s 0.15s ease forwards;
	  }
	  
	  & > .border.focus {
		animation : focusBorderIn 0.45s cubic-bezier(0, 0.55, 0.45, 1) forwards;
	  }
	  
	  & > .label {
		color : config.hex('focus-text');
	  }
	  
	  & > .input {
		& > input, & > textarea {
		  color : config.hex('focus-text');
		}
	  }
	  
	  &.pinned {
		& > .input > span.placeholder {
		  color : config.hex('placeholder-pinned-focused');
		}
	  }
	  
	  &.unpinned {
		& > .input > span.placeholder {
		  color : config.hex('placeholder-unpinned-focused');
		}
	  }
	  
	  & .divider {
		background-color : config.hex('focus-divider');
	  }
	}
	
	&.error:not(:focus-within) {
	  
	  background-color : config.hex('error-background');
	  
	  & > .border.normal {
		
		& > path {
		  stroke : config.hex('error-border');
		}
		
		animation : shake .5s linear !important;
	  }
	  
	  & > .label {
		color : config.hex('error-text') !important;
	  }
	  
	  & > .input {
		
		& > input, & > textarea {
		  color       : config.hex('error-text') !important;
		  caret-color : config.hex('error-text') !important;
		}
	  }
	  
	  &.pinned {
		& > .input > span.placeholder {
		  color : config.hex('error-text');
		}
	  }
	  
	  &.unpinned {
		& > .input > span.placeholder {
		  color : config.hex('error-placeholder');
		}
	  }
	  
	  & .divider {
		background-color : config.hex('error-divider') !important;
	  }
	}
  }
}

/* Keyframes */

@keyframes focusBorderIn {
  
  0% {
	opacity   : 0;
	transform : scale(1.25);
  }
  
  100% {
	opacity   : 1;
	transform : scale(1);
  }
}

@keyframes normalBorderIn {
  
  0% {
	opacity : 0;
  }
  
  100% {
	opacity : 1;
  }
}

@keyframes focusBorderBlur {
  
  0% {
	opacity   : 1;
	transform : scale(1);
  }
  
  100% {
	opacity   : 0;
	transform : scale(1.1);
  }
}

@keyframes normalBorderBlur {
  
  0% {
	opacity : 1;
  }
  
  100% {
	opacity : 0;
  }
}

@keyframes shake {
  
  8%, 41% {
	transform : translateX(-10px);
  }
  25%, 58% {
	transform : translateX(10px);
  }
  75% {
	transform : translateX(-5px);
  }
  92% {
	transform : translateX(5px);
  }
  0%, 100% {
	transform : translateX(0);
  }
}
