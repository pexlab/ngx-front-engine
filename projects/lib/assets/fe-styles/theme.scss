@use 'sass:math';
@use 'utils';

$scope : 'custom' !default;

@function hex($name) {
  @return var(--fe-local-color-#{$scope}-#{$name}-hex, var(--fe-global-color-#{$scope}-#{$name}-hex));
}

@function fadeHex($name, $opacity) {
  @return rgba(var(--fe-local-color-#{$scope}-#{$name}-rgb, var(--fe-global-color-#{$scope}-#{$name}-rgb)), $opacity)
}

@function contrastHex($name) {
  @return var(--fe-local-color-#{$scope}-#{$name}-contrast, var(--fe-global-color-#{$scope}-#{$name}-contrast));
}

/* No scope (mostly used for values from the common palette) */

@function commonHex($name) {
  @return var(--fe-local-color-#{$name}-hex, var(--fe-global-color-#{$name}-hex));
}

@function fadeCommonHex($name, $opacity) {
  @return rgba(var(--fe-local-color-#{$name}-rgb, var(--fe-global-color-#{$name}-rgb)), $opacity)
}

@function commonContrastHex($name) {
  @return var(--fe-local-color-#{$name}-contrast, var(--fe-global-color-#{$name}-contrast));
}

@mixin commonFont($name) {
  font-family      : var(--fe-local-font-#{$name}-family, var(--fe-global-font-#{$name}-family)), sans-serif;
  font-size        : var(--fe-local-font-#{$name}-size, var(--fe-global-font-#{$name}-size));
  font-weight      : var(--fe-local-font-#{$name}-weight, var(--fe-global-font-#{$name}-weight));
  text-size-adjust : none;
}

@mixin commonFontImportant($name) {
  color            : black;
  font-family      : var(--fe-local-font-#{$name}-family, var(--fe-global-font-#{$name}-family)), sans-serif !important;
  font-size        : var(--fe-local-font-#{$name}-size, var(--fe-global-font-#{$name}-size)) !important;
  font-weight      : var(--fe-local-font-#{$name}-weight, var(--fe-global-font-#{$name}-weight)) !important;
  text-size-adjust : none;
}

@mixin commonFontFamily($name) {
  font-family      : var(--fe-local-font-#{$name}-family, var(--fe-global-font-#{$name}-family)), sans-serif;
  text-size-adjust : none;
}

@mixin commonFontFamilyImportant($name) {
  font-family      : var(--fe-local-font-#{$name}-family, var(--fe-global-font-#{$name}-family)), sans-serif !important;
  text-size-adjust : none;
}

@mixin commonFontSize($name) {
  font-size        : var(--fe-local-font-#{$name}-size, var(--fe-global-font-#{$name}-size));
  text-size-adjust : none;
}

@mixin commonFontSizeImportant($name) {
  font-size        : var(--fe-local-font-#{$name}-size, var(--fe-global-font-#{$name}-size)) !important;
  text-size-adjust : none;
}

@mixin commonFontWeight($name) {
  font-weight      : var(--fe-local-font-#{$name}-weight, var(--fe-global-font-#{$name}-weight));
  text-size-adjust : none;
}

@mixin commonFontWeightImportant($name) {
  font-weight      : var(--fe-local-font-#{$name}-weight, var(--fe-global-font-#{$name}-weight)) !important;
  text-size-adjust : none;
}

@mixin inlineIcon($size) {
  
  & > svg-icon {
	
	display     : grid;
	place-items : center;
	
	width       : $size;
	height      : $size;
	
	& > svg {
	  width  : $size;
	  height : $size;
	}
  }
}

@mixin inlineDeepIcon($size) {
  
  ::ng-deep {
	
	& > svg-icon {
	  
	  display     : grid;
	  place-items : center;
	  
	  width       : $size;
	  height      : $size;
	  
	  & > svg {
		width  : $size;
		height : $size;
	  }
	}
  }
}

@mixin scrollbar($thumb, $thumbHover, $track, $overlay: 'y', $size: utils.fes(.5), $padding: utils.fes(.25)) {
  
  /* Firefox scrollbar styling */
  scrollbar-color : $thumb $track;
  
  /* Chrome scrollbar styling */
  & {
	
	&::-webkit-scrollbar {
	  width  : calc(#{$size} + (#{$padding} * 2));
	  height : calc(#{$size} + (#{$padding} * 2));
	}
	
	&::-webkit-scrollbar-thumb {
	  
	  border-radius    : calc((#{$size} / 2) + #{$padding});
	  
	  border-style     : solid;
	  border-color     : transparent;
	  border-width     : $padding;
	  
	  background-color : $thumb;
	  background-clip  : padding-box;
	  
	  transition       : .25s ease background-color;
	  
	  @include utils.hover {
		background-color : $thumbHover;
	  }
	}
	
	&::-webkit-scrollbar-track {
	  border           : none;
	  border-radius    : 0;
	  background-color : $track;
	}
	
	&::-webkit-scrollbar-corner {
	  background-color : $track;
	}
  }
  
  @if $overlay == 'y' or $overlay == 'x' or $overlay == 'xy' {
	
	/* Try to make the scrollbar act as an overlay so that it doesn't push the content around */
	@supports (overflow-y: overlay) {
	  & {
		
		@if $overlay == 'y' or $overlay == 'xy' {
		  overflow-y : overlay;
		} @else {
		  overflow-y : hidden;
		}
		
		@if $overlay == 'x' or $overlay == 'xy' {
		  overflow-x : overlay;
		} @else {
		  overflow-x : hidden;
		}
	  }
	}
	
	/* The scrollbar pushes the content, therefore show the track at all times to prevent jumping */
	@supports not (overflow-y: overlay) {
	  & {
		
		@if $overlay == 'y' or $overlay == 'xy' {
		  overflow-y : scroll;
		} @else {
		  overflow-y : hidden;
		}
		
		@if $overlay == 'x' or $overlay == 'xy' {
		  overflow-x : scroll;
		} @else {
		  overflow-x : hidden;
		}
	  }
	}
  }
}

@mixin scrollbar-tiny($color, $background) {
  
  /* Firefox scrollbar styling */
  scrollbar-color : $color $background;
  
  /* Chrome scrollbar styling */
  & {
	
	&::-webkit-scrollbar {
	  width  : utils.fes(.4);
	  height : utils.fes(.4);
	}
	
	&::-webkit-scrollbar-thumb {
	  border           : transparent;
	  border-radius    : utils.fes(.2);
	  background-color : $color;
	}
	
	&::-webkit-scrollbar-track {
	  border           : none;
	  border-radius    : 0;
	  background-color : $background;
	}
  }
}
